// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc93.FinalRobot.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc93.FinalRobot.Robot;
import org.usfirst.frc93.FinalRobot.RobotMap;
import org.usfirst.frc93.FinalRobot.subsystems.Shooter;
/**
 *
 */
public class ShootCommand extends Command {
    int waitTimer = 0;
    public static final int nothingInShooter = 0;
    public static final int waitingForInput = 1;
    public static final int loadingToShooter = 2;
    public static final int waitingToExtend = 3;
    public static final int retractingPusher = 4;
    public static final int waitingToRetract = 5;
    int shootingState = 0;
    int[] shootingStates = new int[]{
        nothingInShooter,
        waitingForInput,
        loadingToShooter,
        waitingToExtend,
        retractingPusher,
        waitingToRetract};
    
    public ShootCommand() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooter);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        
    }
    // Called repeatedly when this Command is scheduled to run
    String shooterState = "Didn't find a state";
    protected void execute() {
        SmartDashboard.putNumber("Shooter Main Rpms: ",RobotMap.mainEncoder.getRpms());
        SmartDashboard.putNumber("Shooter Guide Rpms: ",RobotMap.guideEncoder.getRpms());
        Shooter.curState = getShooterState();
        switch (shootingStates[shootingState]) {
            case nothingInShooter:
                if (Robot.shooter.getDiscPrescence()) {    //Am I loaded with a disc?
                    if(waitTimer<20){
                        waitTimer++;
                    }
                    else{
                        shootingState++;
                        waitTimer=  0;
                    }
                }
                else{
                    waitTimer= 0;
                }
                shooterState = "Nothing in the shooter";
                break;
            case waitingForInput:
                if(!Robot.hopper.getEnabled()){
                     break;
                }
                if ( Robot.oi.shoot.get() || Robot.shooter.readyToShoot() ) { //Auto or teleop has told me to shoot
                    shootingState++;
                }
                shooterState = "Waiting for input";
                break;
            case loadingToShooter:
                Robot.shooter.extendPusher();
                shootingState++;                
                shooterState = "Loading into the shooter";
                break;
            case waitingToExtend:
               if(Robot.shooter.getPusherExtended()){
                   shootingState++;
               }
                break;
            case retractingPusher:
                Robot.shooter.retractPusher();               
                shootingState++;
                Robot.shooter.stopShot();   //Could change if we double this as an estop variable
                shooterState = "Retracting the pusher";
                break;
            case waitingToRetract:
                if(Robot.shooter.getPusherRetracted()){
                    shootingState = nothingInShooter;
                }
                break;
        }
        SmartDashboard.putBoolean("Ready to Shoot", (shootingState == waitingForInput));
        SmartDashboard.putString("Shooter State",shooterState);
        SmartDashboard.putString("Shooter Setting Is", RobotMap.shooterSetting);
    }
    public int getShooterState(){
        return shootingStates[shootingState];
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
