// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the com   zments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc93.FinalRobot;
import org.usfirst.frc93.FinalRobot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton eStop;    
    public JoystickButton shoot;
    public JoystickButton stopSpinnningUp;
    public JoystickButton dumpDisks;
    public OffsetJoystick operator;
    public JoystickButton climbButton;
    public JoystickButton strafeButton;
    public JoystickButton switchTankDriveButton;
    public JoystickButton switchMecanumDrive;
    public JoystickButton doneAligning;
    public JoystickButton setShooterOnePoint;
    public JoystickButton setShooterTwoPoint;
    public JoystickButton setShooterThreePoint;
    public JoystickButton disableShooterMotors;
    public JoystickButton disableHopperMotor;
    public OffsetJoystick driver;
    public JoystickButton manualTiltClimber;
    public JoystickButton manualRetractClimber;
    public JoystickButton resetGyro;
    public JoystickButton blockerUp;
    public JoystickButton blockerDown;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driver = new OffsetJoystick(2,"driver");
        
        switchMecanumDrive = new JoystickButton(driver, 4);
        switchMecanumDrive.whenReleased(new SwitchMecanumDriveCommand());
        switchTankDriveButton = new JoystickButton(driver, 3);
        switchTankDriveButton.whenReleased(new SwitchTankDriveCommand());
        strafeButton = new JoystickButton(driver, 2);
        strafeButton.whileHeld(new StrafeCommand());
        resetGyro = new JoystickButton(driver,1);
        resetGyro.whenPressed(new ResetGyroCommand());
        blockerDown = new JoystickButton(driver,6);
        blockerUp = new JoystickButton(driver, 5);
        blockerDown.whenReleased(new BlockerDown());  
        blockerUp.whenReleased(new BlockerUp());
        
        operator = new OffsetJoystick(1,"operator");
        shoot = new JoystickButton(operator,7);
        stopSpinnningUp = new JoystickButton(operator, 5);
        stopSpinnningUp.whenPressed(new DisableShooterMotors());
        shoot.whenPressed(new FireDiscCommand());        
        setShooterOnePoint = new JoystickButton(operator, 1);
        setShooterOnePoint.whenPressed(new setShooterOnePoint());
        setShooterTwoPoint = new JoystickButton(operator, 2);
        setShooterTwoPoint.whenPressed(new setShooterTwoPoint());
        setShooterThreePoint = new JoystickButton(operator, 3);
        setShooterThreePoint.whenPressed(new setShooterThreePoint());
	disableHopperMotor = new JoystickButton(operator, 6);
        disableHopperMotor.whenReleased(new DisableHopperMotor());
        manualTiltClimber = new JoystickButton(operator,10);
        manualRetractClimber = new JoystickButton(operator,9);
        manualRetractClimber.whenReleased(new RetractTiltCommand());
        manualTiltClimber.whenReleased(new TiltCommand());
        // SmartDashboard Buttons
        SmartDashboard.putData("Low Close Group Command", new LowCloseGroup());
        SmartDashboard.putData("Stationary Group Command", new StationaryShootingGroup());
        SmartDashboard.putData("Move To Three Group", new MoveToThreePointGroup());
        SmartDashboard.putData("FireDiscCommand", new FireDiscCommand());
        SmartDashboard.putData("Rotate Command", new RotateCommand(1234));
        SmartDashboard.putData("Drive Command", new DriveCommand(1000));
        SmartDashboard.putData("Shooter Group", new ShooterGroup());
        SmartDashboard.putData("Shoot Command", new ShootCommand());
        SmartDashboard.putData("Load Command", new LoadCommand());
        SmartDashboard.putData("Raise  Slider Command", new RaiseSliderCommand(1250));
        SmartDashboard.putData("Pull Down Slider Command", new PullDownSliderCommand(-300));
        SmartDashboard.putData("Tilt Command", new TiltCommand());
        SmartDashboard.putData("Retract Tilt Command", new RetractTiltCommand());
        SmartDashboard.putData("Gripper Lock Command", new GripperLockCommand());
        SmartDashboard.putData("Gripper Release Command", new GripperReleaseCommand());
        SmartDashboard.putData("Mechanical Lock Command", new MechanicalLockCommand());
        SmartDashboard.putData("Mechanical Release Command",new MechanicalReleaseCommand());
        SmartDashboard.putData("Hook Command", new HookCommand());
        SmartDashboard.putData("Climber Group", new ClimberGroup());
        SmartDashboard.putData("Strafe Command", new StrafeCommand());
        SmartDashboard.putData("Switch Tank Drive Command", new SwitchTankDriveCommand());
        SmartDashboard.putData("Switch Mecanum Drive Command", new SwitchMecanumDriveCommand());
        SmartDashboard.putData("Shooter Main Command", new ShooterMainCommand());
        SmartDashboard.putData("Shooter Guide Command", new ShooterGuideCommand());
        SmartDashboard.putData("Shooter Main Command", new ShooterMainCommand());
        SmartDashboard.putData("Shooter Guide Command", new ShooterGuideCommand());
        SmartDashboard.putData("Set to One Point Command", new setShooterOnePoint());
        SmartDashboard.putData("Set to Two Point Command", new setShooterTwoPoint());
        SmartDashboard.putData("Set to Three Point Command", new setShooterThreePoint());
        SmartDashboard.putData("Disable Shooter Motors", new DisableShooterMotors());
        SmartDashboard.putData("Disable/Enable Hopper Motor",new DisableHopperMotor());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getOperator() {
        return operator;
    }
    public Joystick getDriver() {
        return driver;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
