// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc93.FinalRobot.subsystems;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc93.FinalRobot.RobotMap;
import org.usfirst.frc93.FinalRobot.commands.ShootCommand;
import org.usfirst.frc93.FinalRobot.commands.ShooterGroup;

/**
 *
 */
public class Shooter extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    SpeedController shooterGuide = RobotMap.shooterShooterGuide;
    SpeedController shooterMain = RobotMap.shooterShooterMain;
    DoubleSolenoid pusher = RobotMap.shooterPusher;
    
    public static int shooterOnePointMain = 1550;
    public static int shooterTwoPointMain = 3850; //3750
    public static int shooterThreePointMain= 4275; //4000 //3900 was low
    
    public static int shooterOnePointGuide = 1500;
    public static int shooterTwoPointGuide = 2400; //2300
    public static int shooterThreePointGuide = 2775; //2600 //2400 was low
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER  ID=DECLARATIONS
    public static int curState = ShootCommand.nothingInShooter;
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new ShooterGroup());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    //Basic architecture to tell wen the shooter is ready to shoot, either 
    //bind it ot a button or simply call it in autonomous
    private boolean startShooting;
    
    private boolean motorsEnabled = true;
    
    public static final int onePointGoal = 0;
    public static final int twoPointGoal = 1;
    public static final int threePointGoal = 2;
    public static final int off = 4;
    
    public static int shootRpmsMain;
    public static int shootRpmsGuide;
    
    public void setShootingState(int position) {
        switch(position)
        {
            case onePointGoal:
                shootRpmsMain = shooterOnePointMain;
                shootRpmsGuide = shooterOnePointGuide;
                motorsEnabled = true;
                break;
            case twoPointGoal:
                shootRpmsMain = shooterTwoPointMain;
                shootRpmsGuide = shooterTwoPointGuide;
                motorsEnabled = true;
                break;
            case threePointGoal:
                shootRpmsMain = shooterThreePointMain;
                shootRpmsGuide = shooterThreePointGuide;
                motorsEnabled = true;
                break;
            case off:
                motorsEnabled = false;
                break;
        }
    }
    public void shoot() {
        startShooting = true;
    }

    public boolean readyToShoot() {
        return startShooting;
    }

    public void stopShot() {
        startShooting = false;
    }

    public void setShootPosition(int shootRpms) {
        shootRpmsMain = shootRpms;
    }

    public int getMainSpeedSetting() {
        return shootRpmsMain;
    }

    public int getGuideSpeedSetting() {
        return shootRpmsGuide;
    }
    public boolean getMotorsEnabled(){
        return motorsEnabled;
    }
    public boolean getDiscPrescence(){
        return !RobotMap.discPresence.get();
    }
    public boolean getPusherExtended(){
        return !RobotMap.pusherExtended.get();
    }
    public boolean getPusherRetracted(){
        return !RobotMap.pusherRetracted.get();
    }
    public void extendPusher(){
        RobotMap.shooterPusher.set(DoubleSolenoid.Value.kReverse);
    }
    public void retractPusher(){
        RobotMap.shooterPusher.set(DoubleSolenoid.Value.kForward); 
    }
}