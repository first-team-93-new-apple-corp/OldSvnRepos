// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc93.FinalRobot;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */

public class RobotMap {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController shooterShooterGuide;
    public static SpeedController shooterShooterMain;
    public static DoubleSolenoid shooterPusher;
    public static DigitalInput shooterRetracted;
    public static DigitalInput shooterExtended;
    public static VEXSpeedController hopperFeederMotor;
    public static DigitalInput hopperHopperLightSensor;
    
    public static SpeedController driveFrontRight;
    public static SpeedController driveFrontLeft;
    public static SpeedController driveBackRight;
    public static SpeedController driveBackLeft;
    public static RobotDrive driveRobotDrive;
    public static Encoder driveEncoder;
    public static Gyro driveGyro;
    
    public static DoubleSolenoid dumperDumpSolenoid;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Compressor compressor;
    public static PIDOutputAdapter driveOut;
    public static LightEncoder guideEncoder;
    public static LightEncoder mainEncoder;
    public static SendableChooser autoChooser;
    public static String shooterSetting = "Off";
   
    //Climber new stuffs
    public static DoubleSolenoid tiltSolenoid;
    public static DoubleSolenoid blockerSolenoid;
    public static DoubleSolenoid lockSolenoid;
    public static Encoder climberLeftEnc;
    public static Encoder climberRightEnc;
    public static SpeedController climberLeftMotor;
    public static SpeedController climberRightMotor;
    public static CoordinatedPIDProfiler climberController;
    public static DigitalInput pusherExtended;
    public static DigitalInput pusherRetracted;
    public static DigitalInput discPresence;
    public static DigitalInput autoSwitch;
    
    public static void init() {
        discPresence = new DigitalInput(2,2);
        LiveWindow.addSensor("Shooter", "ShooterDiscPrescence", discPresence);
        pusherExtended = new DigitalInput(2,7);
        LiveWindow.addSensor("Shooter", "ShooterPusherExtended", pusherExtended);
        pusherRetracted = new DigitalInput(2,8);
        LiveWindow.addSensor("Shooter", "ShooterPusherRetracted",pusherRetracted);
        autoSwitch = new DigitalInput(2,14);
        LiveWindow.addSensor("Drive","Autonomous Switch", autoSwitch);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        shooterShooterGuide = new Victor(1, 10);
	LiveWindow.addActuator("Shooter", "ShooterGuide", (Victor) shooterShooterGuide);
        
        shooterShooterMain = new Victor(1, 9);
	LiveWindow.addActuator("Shooter", "ShooterMain", (Victor) shooterShooterMain);
        
        shooterPusher = new DoubleSolenoid(1, 3, 4);
                
        hopperFeederMotor = new VEXSpeedController(2, 10);
	//LiveWindow.addActuator("Hopper", "FeederMotor", (SpeedController) hopperFeederMotor);
        
        hopperHopperLightSensor = new DigitalInput(1, 14);
	LiveWindow.addSensor("Hopper", "HopperLightSensor", hopperHopperLightSensor);
        
        driveFrontRight = new Talon(1, 6);
	LiveWindow.addActuator("Drive", "FrontRight", (Talon) driveFrontRight);
        
        driveFrontLeft = new Talon(1, 5);
	LiveWindow.addActuator("Drive", "FrontLeft", (Talon) driveFrontLeft);
        
        driveBackRight = new Talon(1, 7);
	LiveWindow.addActuator("Drive", "BackRight", (Talon) driveBackRight);
        
        driveBackLeft = new Talon(1, 4);
	LiveWindow.addActuator("Drive", "BackLeft", (Talon) driveBackLeft);
        
        driveRobotDrive = new RobotDrive(driveFrontLeft, driveBackLeft,
        driveFrontRight, driveBackRight);
	driveRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        driveRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveRobotDrive.setSafetyEnabled(true);
        driveRobotDrive.setExpiration(0.1);
        driveRobotDrive.setSensitivity(0.5);
        driveRobotDrive.setMaxOutput(1.0);
        driveEncoder = new Encoder(1, 5, 1, 6, false, EncodingType.k4X);
	LiveWindow.addSensor("Drive", "Encoder", driveEncoder);
        driveEncoder.setDistancePerPulse(1.0);
        driveEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        driveEncoder.start();
        driveGyro = new Gyro(1, 1);
        driveGyro.setSensitivity(0.05f);
	LiveWindow.addSensor("Drive", "Gyro", driveGyro);
        
        
        compressor = new Compressor(2, 1, 2, 8);
        compressor.start();
	LiveWindow.addActuator("Climber", "Compressor", compressor);
        
        
        dumperDumpSolenoid = new DoubleSolenoid(2, 1, 2);      
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveEncoder.setReverseDirection(false);
        driveOut = new PIDOutputAdapter();
        guideEncoder = new LightEncoder(2,5);   // TODO Remember to map this manually
        mainEncoder = new LightEncoder(2,6);
        autoChooser = new SendableChooser();
        //Climber stuffs
        int tolerance = 50;
        tiltSolenoid = new DoubleSolenoid(1,1,2);
        blockerSolenoid = new DoubleSolenoid(1,7,8);
        lockSolenoid = new DoubleSolenoid(1,6,5);
        climberLeftEnc = new Encoder(1,1,1,2);
        climberRightEnc = new Encoder(1,3,1,4);
        climberLeftEnc.setReverseDirection(false);
        climberRightEnc.setReverseDirection(true);
        climberLeftEnc.setPIDSourceParameter(Encoder.PIDSourceParameter.kDistance);
        climberRightEnc.setPIDSourceParameter(Encoder.PIDSourceParameter.kDistance);
        climberLeftEnc.start();
        climberRightEnc.start();
        climberRightMotor = new Victor(1,3);
        climberLeftMotor = new Victor(1,8);
        PIDController pid1 = new PIDController(0.001f,0.001f,0,climberRightEnc, climberRightMotor);
        PIDController pid2 = new PIDController(0.001f,0.001f,0,climberLeftEnc, climberLeftMotor);
        pid1.setAbsoluteTolerance(tolerance);
        pid2.setAbsoluteTolerance(tolerance);
        climberController = new CoordinatedPIDProfiler(200,pid1,pid2,0,climberRightEnc, climberLeftEnc);
    }
}