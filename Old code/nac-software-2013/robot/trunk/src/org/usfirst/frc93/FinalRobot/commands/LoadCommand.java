// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc93.FinalRobot.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc93.FinalRobot.Robot;
import org.usfirst.frc93.FinalRobot.RobotMap;

/**
 *
 */
public class LoadCommand extends Command {

    int waitTimer = 0;
    int backTimer = 0;
    public static final int nothingInHopper = 0;
    public static final int startingLoad = 1;
    public static final int waitingToLoad = 2;
    public static final int finishingLoad = 3;
    public static final int backdriving = 4;
    public static final int reenabled = 5;
    public static final int disabled = 6;
    int loadingState = 0;
    int[] loadingStates = new int[]{
        nothingInHopper,
        startingLoad,
        waitingToLoad,
        backdriving,
        finishingLoad,
        reenabled,
        disabled
    };

    public LoadCommand() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        requires(Robot.hopper);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time

    protected void initialize() {
    }
    // Called repeatedly when this Command is scheduled to run

    protected void execute() {
        SmartDashboard.putBoolean("HopperLightSensor", RobotMap.hopperHopperLightSensor.get());
        SmartDashboard.putString("Hopper State", (loadingStates[loadingState] == nothingInHopper) ? "nothing in hopper" : "loading a disc");
        SmartDashboard.putNumber("Hopper is trying to drive ate", RobotMap.hopperFeederMotor.get());
        SmartDashboard.putBoolean("Disc in shooter?", Robot.shooter.getDiscPrescence());
        SmartDashboard.putBoolean("Pusher Extendeed?", Robot.shooter.getPusherExtended());
        if(!Robot.hopper.getEnabled()){
            loadingState = disabled;
        }
        switch (loadingStates[loadingState]) {
            case nothingInHopper:
                RobotMap.hopperFeederMotor.set(0);
                if (    !Robot.shooter.getDiscPrescence() //? wouldnt we want one to not be in there
                        && Robot.shooter.getPusherRetracted()
                        && RobotMap.hopperHopperLightSensor.get() == false) {
                    loadingState++;
                }
                break;
            case startingLoad:
                RobotMap.hopperFeederMotor.set(-1.0f);
                loadingState++;
                break;
            case waitingToLoad:
                if (Robot.shooter.getDiscPrescence()) {
                    loadingState++;
                }
                break;
            case backdriving:
                backTimer += 20;
                RobotMap.hopperFeederMotor.set(+1.0f);
                if (backTimer == 260) {
                    backTimer = 0;
                    loadingState++;
                }
                break;
            case finishingLoad:
                RobotMap.hopperFeederMotor.set(0);
                loadingState = nothingInHopper;
                break;
            case disabled:
                RobotMap.hopperFeederMotor.set(0);
                if(Robot.hopper.getEnabled()){
                    loadingState = reenabled;
                }
                break;
            case reenabled:
                backTimer += 20;
                RobotMap.hopperFeederMotor.set(+1.0f);
                if (backTimer == 1000) {
                    backTimer = 0;
                    loadingState++;
                }
                loadingState = nothingInHopper;
                break;
        }
        SmartDashboard.putBoolean("Hopper Enabled? ", Robot.hopper.getEnabled());
    }
    // Make this return true when this Command no longer needs to run execute()

    protected boolean isFinished() {
        return false;
    }
    // Called once after isFinished returns true

    protected void end() {
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run

    protected void interrupted() {
    }
}
