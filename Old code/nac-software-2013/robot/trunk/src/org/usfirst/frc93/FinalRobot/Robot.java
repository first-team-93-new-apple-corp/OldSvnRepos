// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc93.FinalRobot;
import edu.wpi.first.wpilibj.IterativeRobot; 
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc93.FinalRobot.commands.*;
import org.usfirst.frc93.FinalRobot.subsystems.*;
/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
    Command autonomousCommand;
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Shooter shooter;
    public static Hopper hopper;
    public static Drive drive;
    public static Climber climber;
    public static Blocker blocker;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
	RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        shooter = new Shooter();
        hopper = new Hopper();
        drive = new Drive();
        climber = new Climber();
        blocker = new Blocker();
        //RobotMap.autoChooser.addDefault("Stationary Shot Three Point", new StationaryShootingGroup());
        //RobotMap.autoChooser.addObject("Stationary Shot Two Point", new AutoTwoPoint());
        autonomousCommand = new StationaryShootingGroup();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // This MUST be here. If the OI creates Commands (which it very likely
        // will), constructing it during the construction of CommandBase (from
        // which commands extend), subsystems are not guaranteed to be
        // yet. Thus, their requires() statements may grab null pointers. Bad
        // news. Don't move it.
        oi = new OI();
        
	
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
       // autonomousCommand = new AutonomousCommand();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }  
    public void autonomousInit() {
       // autonomousCommand = (Command)RobotMap.autoChooser.getSelected();
        if(RobotMap.autoSwitch.get()){
            //true , so when its straight is three point
            autonomousCommand = new StationaryShootingGroup();
        }
        else{
            //false, so when its forward is two point
            autonomousCommand = new AutoTwoPoint();
        }
        SmartDashboard.putString("Current auto command is ", autonomousCommand.getName());
        autonomousCommand.start();
        // schedule the autonomous command (example)
        RobotMap.compressor.start();        
    }
    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }
    public void teleopInit() {
        autonomousCommand.cancel();
	// This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        RobotMap.compressor.start();
        Robot.shooter.stopShot();
    }
    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }
    /**
     * This function called periodically during test mode
     */
    public void testPeriodic() {
       // System.out.println("Encoder left reads "+RobotMap.climberLeftEnc.getDistance()+" Victor left reads "+RobotMap.climberLeftMotor.get());
        //System.out.println("Encoder right reads "+RobotMap.climberRightEnc.getDistance()+" Victor right reads "+RobotMap.climberRightMotor.get());
        //System.out.println("Our guide spins at "+RobotMap.guideEncoder.getRpms());
        //System.out.println("Our main spins at "+RobotMap.mainEncoder.getRpms());
        LiveWindow.run();
    }
}
