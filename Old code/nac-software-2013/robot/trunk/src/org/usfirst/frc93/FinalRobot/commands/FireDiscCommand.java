// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc93.FinalRobot.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc93.FinalRobot.Robot;
import org.usfirst.frc93.FinalRobot.subsystems.Shooter;
/**
 *
 */
public class  FireDiscCommand extends Command {
    public FireDiscCommand() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        System.out.println("Firing Or Discs");
    }
    // Called repeatedly when this Command is scheduled to run
    
    boolean shooterLatch = false;
    
    protected void execute() {
        if(shooterLatch == false){
            Robot.shooter.shoot();
            shooterLatch = true;
        }
            
    }
    // Make this return true when this Command no longer needs to run execute()
    
    
    protected boolean isFinished() {
        if((shooterLatch == true && Robot.shooter.readyToShoot() == false) || (shooterLatch == false && Shooter.curState!=ShootCommand.waitingForInput)){
            shooterLatch  = false;
            return true;
        }
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
        
        System.out.println("Just finished firing a disc and im ready to fire another");
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
