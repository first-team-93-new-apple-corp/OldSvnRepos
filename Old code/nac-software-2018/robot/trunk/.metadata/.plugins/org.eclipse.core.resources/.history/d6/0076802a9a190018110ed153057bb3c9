/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package org.usfirst.frc.team93.robot;

import org.usfirst.frc.team93.robot.subsystems.Claw;
import org.usfirst.frc.team93.robot.subsystems.Drive;
import org.usfirst.frc.team93.robot.subsystems.LeftRamp;
import org.usfirst.frc.team93.robot.subsystems.RightRamp;
import org.usfirst.frc.team93.robot.subsystems.Scaler;
import org.usfirst.frc.team93.robot.subsystems.Tilter;
import org.usfirst.frc.team93.robot.utilities.CustomScheduler;
import org.usfirst.frc.team93.robot.utilities.DriveChooser;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in the
 * project.
 */
public class Robot extends TimedRobot
{
	public static Drive drive;
	public static Scaler scaler;
	public static LeftRamp leftRamp;
	public static RightRamp rightRamp;
	public static RobotMap robotMap;
	public static SendableChooser<DriveMode> SelectedDriveMode;
	public static SendableChooser<StartingPosition> OurStartingPosition;
	public static SendableChooser<ScoringTarget> ScoringTargetPriority;
	public static SendableChooser<Boolean> ScoreFromDriverStationSide;
	public static SendableChooser<Boolean> WaitBeforeAutonomous;
	public static Claw claw;
	public static DriveChooser driveChooser;
	public static OI m_oi;
	public static CustomScheduler customScheduler;
	public static Tilter tilter;
	UsbCamera cam0;
	UsbCamera cam1;
	Command m_autonomousCommand;
	SendableChooser<Command> m_chooser = new SendableChooser<>();
	
	/**
	 * 
	 * @author ben.fager
	 *         Used for determining the camera usage
	 */
	enum camera_config_t
	{
		CAMERAS_DISABLED, CAMERAS_SINGLE_TEST, CAMERAS_FULL
	};
	
	/**
	 * 
	 * @author ben.fager
	 *         Determines the drive mode selected on the smart dashboard
	 */
	public enum DriveMode
	{
		JOYSTICK_TANK, JOYSTICK_SPLIT_AXIS, JOYSTICK_ARCADE
	}
	
	/**
	 * 
	 * @author alex.stevenson
	 *         Used for Autonomous, determining starting position of robot
	 */
	public enum StartingPosition
	{
		LEFT, CENTER, RIGHT
	}
	
	/**
	 * 
	 * @author alex.stevenson
	 *         Used to determine our path
	 */
	public enum ScoringTarget
	{
		SWITCH, SCALE, LEFT, RIGHT, MOBILITY, NO_AUTONOMOUS
	}
	
	final public camera_config_t camerasEnabled = camera_config_t.CAMERAS_FULL;
	
	/**
	 * t6[
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	@Override
	public void robotInit()
	{
		customScheduler = new CustomScheduler();
		SelectedDriveMode = new SendableChooser<DriveMode>();
		SelectedDriveMode.addObject("2 Joysticks", DriveMode.JOYSTICK_TANK);
		SelectedDriveMode.addObject("2 Joysticks split axis", DriveMode.JOYSTICK_SPLIT_AXIS);
		SelectedDriveMode.addObject("Arcade drive - joystick", DriveMode.JOYSTICK_ARCADE);
		
		// Our starting position
		OurStartingPosition = new SendableChooser<StartingPosition>();
		OurStartingPosition.addDefault("Left", StartingPosition.LEFT);
		OurStartingPosition.addObject("Center", StartingPosition.CENTER);
		OurStartingPosition.addObject("Right", StartingPosition.RIGHT);
		
		// Our priority for scoring target
		ScoringTargetPriority = new SendableChooser<ScoringTarget>();
		ScoringTargetPriority.addDefault("Scale", ScoringTarget.SCALE);
		ScoringTargetPriority.addObject("Switch", ScoringTarget.SWITCH);
		ScoringTargetPriority.addObject("Left", ScoringTarget.LEFT);
		ScoringTargetPriority.addObject("Right", ScoringTarget.RIGHT);
		ScoringTargetPriority.addObject("Mobility", ScoringTarget.MOBILITY);
		ScoringTargetPriority.addObject("No Autonomous", ScoringTarget.NO_AUTONOMOUS);
		
		// Side of target we want to score from
		ScoreFromDriverStationSide = new SendableChooser<Boolean>();
		ScoreFromDriverStationSide.addDefault("Driver Station Side", true);
		ScoreFromDriverStationSide.addObject("Field Wall Side", false);
		
		// Add a wait before Autonomous
		WaitBeforeAutonomous = new SendableChooser<Boolean>();
		WaitBeforeAutonomous.addDefault("No", false);
		WaitBeforeAutonomous.addObject("Yes", true);
		
		// DriveModifier = new SendableChooser();
		// DriveModifier.addDefault("Standard", false);
		// DriveModifier.addObject("Squared", true);
		
		robotMap = new RobotMap();
		claw = new Claw();
		// chooser.addObject("My Auto", new MyAutoCommand());
		SmartDashboard.putData("DriveMode", SelectedDriveMode);
		drive = new Drive();
		
		scaler = new Scaler();
		leftRamp = new LeftRamp();
		rightRamp = new RightRamp();
		tilter = new Tilter();
		
		m_oi = new OI();
		driveChooser = new DriveChooser();
		if (Robot.isReal())
		{
			if (camerasEnabled == camera_config_t.CAMERAS_FULL || camerasEnabled == camera_config_t.CAMERAS_SINGLE_TEST)
			{
				cam0 = CameraServer.getInstance().startAutomaticCapture(0);
				cam0.setResolution(160, 120);
				cam0.setFPS(10);
				cam0.setBrightness(5);
				cam0.setExposureManual(40);
				System.out.println("Camera 0 enabled");
			}
			if (camerasEnabled == camera_config_t.CAMERAS_FULL)
			{
				cam1 = CameraServer.getInstance().startAutomaticCapture(1);
				cam1.setResolution(160, 120);
				cam1.setFPS(10);
			}
		}
	}
	
	/**
	 * This function is called once each time the robot enters Disabled mode.
	 * You can use it to reset any subsystem information you want to clear when
	 * the robot is disabled.
	 */
	@Override
	public void disabledInit()
	{
		
	}
	
	@Override
	public void disabledPeriodic()
	{
		Scheduler.getInstance().run();
		
	}
	
	/**
	 * This autonomous (along with the chooser code above) shows how to select
	 * between different autonomous modes using the dashboard. The sendable
	 * chooser code works with the Java SmartDashboard. If you prefer the
	 * LabVIEW Dashboard, remove all of the chooser code and uncomment the
	 * getString code to get the auto name from the text box below the Gyro
	 *
	 * <p>
	 * You can add additional auto modes by adding additional commands to the
	 * chooser code above (like the commented example) or additional comparisons
	 * to the switch structure below with additional strings & commands.
	 */
	@Override
	public void autonomousInit()
	{
		m_autonomousCommand = m_chooser.getSelected();
		
		/*
		 * String autoSelected = SmartDashboard.getString("Auto Selector",
		 * "Default"); switch(autoSelected) { case "My Auto": autonomousCommand
		 * = new MyAutoCommand(); break; case "Default Auto": default:
		 * autonomousCommand = new ExampleCommand(); break; }
		 */
		
		// schedule the autonomous command (example)
		if (m_autonomousCommand != null)
		{
			m_autonomousCommand.start();
		}
	}
	
	/**
	 * This function is called periodically during autonomous.
	 */
	@Override
	public void autonomousPeriodic()
	{
		Scheduler.getInstance().run();
		CustomScheduler.RunAutoScheduler();
		
	}
	
	@Override
	public void teleopInit()
	{
		
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (m_autonomousCommand != null)
		{
			m_autonomousCommand.cancel();
		}
	}
	
	/**
	 * This function is called periodically during operator control.
	 */
	@Override
	public void teleopPeriodic()
	{
		
		Scheduler.getInstance().run();
		CustomScheduler.RunTeleopScheduler();
	}
	
	/**
	 * This function is called periodically during test mode.
	 */
	@Override
	public void testPeriodic()
	{
	}
}
