// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc93.Team93Robot2015;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import org.usfirst.frc93.Team93Robot2015.commands.AutoCommandsMilwaukee;
import org.usfirst.frc93.Team93Robot2015.commands.DetectElevatorSlip;
import org.usfirst.frc93.Team93Robot2015.commands.DisplayDriveEncoderInformation;
import org.usfirst.frc93.Team93Robot2015.commands.DisplayElevatorPosition;
import org.usfirst.frc93.Team93Robot2015.commands.NewAutoCamera;
import org.usfirst.frc93.Team93Robot2015.subsystems.Drawbridge;
import org.usfirst.frc93.Team93Robot2015.subsystems.Drive;
import org.usfirst.frc93.Team93Robot2015.subsystems.Elevator;
import org.usfirst.frc93.Team93Robot2015.subsystems.Grabber;
import org.usfirst.frc93.Team93Robot2015.subsystems.Rake;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
    // Command AutonomousCommandGroup;
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value =
    // "MS_CANNOT_BE_FINAL", justification = "I know what I'm doing")

    public static Drawbridge drawbridge = new Drawbridge();
    public static Drive drive;
    public static Elevator elevator;
    public static Grabber grabber = new Grabber();
    public static Rake rake = new Rake();
    public static RobotMap robotMap;

    public static Command autonomousCommands;
    public static Command displayElevatorPosition;
    public static Command displayDriveEncoderInformation;
    public static Command detectElevatorSlip;

    public static NewAutoCamera newautocam;

    // public static TeleopCamera teleopCamera;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */

    @Override
    public void robotInit() {
        try {
            RobotMap.init();
        }
        catch (ExceptionInInitializerError e) {
            System.out.println(e.getMessage());
            System.out.flush();
        }
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drive = new Drive();
        elevator = new Elevator();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        // (which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        displayDriveEncoderInformation = new DisplayDriveEncoderInformation();
        displayDriveEncoderInformation.setRunWhenDisabled(true);
        displayElevatorPosition = new DisplayElevatorPosition();
        displayElevatorPosition.setRunWhenDisabled(true);
        detectElevatorSlip = new DetectElevatorSlip();
        detectElevatorSlip.setRunWhenDisabled(true);

        displayDriveEncoderInformation.start();
        displayElevatorPosition.start();
        detectElevatorSlip.start();
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        // RobotMap.visionProcessorPIDSource.setRunWhenDisabled(true);
        // RobotMap.visionProcessorPIDSource.start();
        newautocam = new NewAutoCamera();
        // teleopCamera.setRunWhenDisabled(true);
        newautocam.start();

    }

    /**
     * This function is called when the disabled button is hit. You can use it
     * to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit() {
        grabber.openClaw();
    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        // schedule the autonomous command (example)
        autonomousCommands = new AutoCommandsMilwaukee();
        autonomousCommands.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {

        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        Drive.setAllMotors(0.0);
        // displayElevatorPosition.start();
        // displayElevatorPosition.start();
        // detectElevatorSlip.start();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();

        // System.out.println("Right = " + RobotMap.RIGHT_MOTOR_ENCODER.pidGet()
        // + "   Left = " + RobotMap.LEFT_MOTOR_ENCODER.pidGet());

        // System.out.println("Rake Encoder Reads: "
        // + RobotMap.RAKE_CLAW_ENCODER.getVoltage() + "PID Setting: "
        // + RobotMap.RAKE_MOTOR.get());

        System.out.println("Right Hand Encoder Voltage:"
                + RobotMap.RIGHT_HAND_ENCODER.getAngle());
        System.out.println("Left Hand Encoder Voltage:"
                + RobotMap.LEFT_HAND_ENCODER.getAngle());

        // System.out.println("Right Hand Angle = "
        // + RobotMap.RIGHT_HAND_ENCODER.getAngle()
        // + "Right Hand Error = "
        // + RobotMap.rightGrabberControl.getError());
        // System.out.println("Left Hand Angle = "
        // + RobotMap.LEFT_HAND_ENCODER.getAngle() + "Left Hand Error = "
        // + RobotMap.leftGrabberControl.getError());

        // System.out.println("Right = " + RobotMap.RIGHT_MOTOR_ENCODER.pidGet()
        // + "   Left = " + RobotMap.LEFT_MOTOR_ENCODER.pidGet());

        // System.out.println("Elevator Encoder Reads: "
        // + RobotMap.ELEVATOR_ENCODER.get());

        // System.out
        // .println("PID Error = " + RobotMap.elevatorControl.getError());

        // System.out.println("Switch One = "
        // + RobotMap.AUTONOMOUS_SELECTOR_ONE.get());

        // System.out.println("Switch Two = "
        // + RobotMap.AUTONOMOUS_SELECTOR_TWO.get());

        // System.out.println("Switch Three = "
        // + RobotMap.AUTONOMOUS_SELECTOR_THREE.get());

        // System.out.println("Switch Four = "
        // + RobotMap.AUTONOMOUS_SELECTOR_FOUR.get());
        //

        // int AutoPlan = 0;
        // for (int i = 0; i < RobotMap.AutoSwitches.length; i++) {
        // AutoPlan += (RobotMap.AutoSwitches[i].get()) ? 1 : 0;
        // }
        // System.out.println("Num of auto switches = " + AutoPlan);

        // System.out.println("Bridge State = " +
        // drawbridge.getDrawbridgeState());
    }

    /**
     * This function is called periodically during test mode
     */
    @Override
    public void testPeriodic() {
        LiveWindow.run();
    }
}
