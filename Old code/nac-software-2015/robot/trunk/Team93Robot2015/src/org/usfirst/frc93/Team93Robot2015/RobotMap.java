// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc93.Team93Robot2015;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.BuiltInAccelerometer;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import org.usfirst.frc93.Team93Robot2015.utilities.LineFollowerPIDSource;
import org.usfirst.frc93.Team93Robot2015.utilities.PIDCoordinator;
import org.usfirst.frc93.Team93Robot2015.utilities.PIDOutput2Group;
import org.usfirst.frc93.Team93Robot2015.utilities.PIDOutput3Group;
import org.usfirst.frc93.Team93Robot2015.utilities.SteeringAndSpeedCoordinator;
import org.usfirst.frc93.Team93Robot2015.utilities.Team93CANTalon;
import org.usfirst.frc93.Team93Robot2015.utilities.Team93Potentiometer;
import org.usfirst.frc93.Team93Robot2015.utilities.TwoEncoderPIDSource;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static final DigitalInput[] AutoSwitches = { new DigitalInput(5),
            new DigitalInput(3), new DigitalInput(1), new DigitalInput(0) };

    // Limit Switches
    public static final DigitalInput ELEVATOR_LIMIT_SWITCH_TOP = new DigitalInput(
            12);
    public static final DigitalInput ELEVATOR_LIMIT_SWITCH_BOTTOM = new DigitalInput(
            11);
    public static final DigitalInput BIN_SENSOR_LIMIT_SWITCH = new DigitalInput(
            2);

    // Encoders
    public static final Encoder LEFT_MOTOR_ENCODER = new Encoder(14, 15, true,
            EncodingType.k1X);
    public static final Encoder RIGHT_MOTOR_ENCODER = new Encoder(24, 25, true,
            EncodingType.k1X);
    public static final Encoder ELEVATOR_ENCODER = new Encoder(16, 17, true);

    // Motors
    public static final SpeedController LEFT_DRIVE_MOTOR_TOP = new Talon(1);
    public static final SpeedController LEFT_DRIVE_MOTOR_FRONT = new Talon(5);
    public static final SpeedController LEFT_DRIVE_MOTOR_BACK = new Talon(3);

    public static final SpeedController RIGHT_DRIVE_MOTOR_TOP = new Talon(0);
    public static final SpeedController RIGHT_DRIVE_MOTOR_FRONT = new Talon(4);
    public static final SpeedController RIGHT_DRIVE_MOTOR_BACK = new Talon(2);

    public static final SpeedController RIGHT_ELEVATOR_MOTOR = new Talon(7);
    public static final SpeedController LEFT_ELEVATOR_MOTOR = new Talon(6);

    public static final SpeedController RIGHT_HAND_MOTOR = new Team93CANTalon(
            1, 1.0);
    public static final SpeedController LEFT_HAND_MOTOR = new Team93CANTalon(2,
            -1.0);

    public static final SpeedController RAKE_MOTOR = new Team93CANTalon(3, 1.0);

    // Analog Inputs
    public static final Team93Potentiometer RIGHT_HAND_ENCODER = new Team93Potentiometer(
            0, -79.10, 20.06 + 15.24 + 15 + 90);
    public static final Team93Potentiometer LEFT_HAND_ENCODER = new Team93Potentiometer(
            1, 79.10, -322.35 - 32.0 + 27 + 12 + 15 + 86);
    public static final Team93Potentiometer RAKE_CLAW_ENCODER = new Team93Potentiometer(
            2, 1.0, 0.0);

    public static final AnalogInput LINE_FOLLOWER_LEFT = new AnalogInput(5);
    public static final AnalogInput LINE_FOLLOWER_MIDDLE = new AnalogInput(6);
    public static final AnalogInput LINE_FOLLOWER_RIGHT = new AnalogInput(7);

    // Solenoids
    public static final DoubleSolenoid CLAW_SOLENOID = new DoubleSolenoid(3, 4);
    public static final DoubleSolenoid DRAWBRIDGE_SOLENOID = new DoubleSolenoid(
            0, 0, 1);

    // Accelerometer
    public static final BuiltInAccelerometer ROBOT_ACCELEROMETER = new BuiltInAccelerometer();

    // PIDOutputGroups
    public static PIDOutput3Group leftDriveGroup;
    public static PIDOutput3Group rightDriveGroup;
    public static PIDOutput2Group driveAllMotorsGroup;
    public static PIDOutput2Group elevatorGroup;

    // PIDControllers
    public static PIDController driveSpeedControl;
    public static PIDController driveLineFollowSteering;
    public static PIDController visionProcessorLineFollowSteering;
    public static PIDController driveEncoderSteering;
    public static PIDController elevatorControl;
    public static PIDController rightGrabberControl;
    public static PIDController leftGrabberControl;
    public static PIDController rakeControl;

    // Coordination Groups
    public static PIDCoordinator grabberCoordinator;

    // Steering Function
    public static SteeringAndSpeedCoordinator steerAndSpeed;

    // Line Follower PID Source
    public static LineFollowerPIDSource lineFollowerPIDSource;

    // Encoder Steering
    public static TwoEncoderPIDSource encoderSteering;

    // Vision Processor
    // public static VisionProcessor visionProcessorPIDSource;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {

        LEFT_MOTOR_ENCODER
                .setPIDSourceParameter(Encoder.PIDSourceParameter.kDistance);
        LEFT_MOTOR_ENCODER.reset();
        RIGHT_MOTOR_ENCODER
                .setPIDSourceParameter(Encoder.PIDSourceParameter.kDistance);
        ELEVATOR_ENCODER
                .setPIDSourceParameter(Encoder.PIDSourceParameter.kDistance);

        leftDriveGroup = new PIDOutput3Group(LEFT_DRIVE_MOTOR_TOP,
                LEFT_DRIVE_MOTOR_FRONT, LEFT_DRIVE_MOTOR_BACK, -1.0, -1.0, -1.0);
        rightDriveGroup = new PIDOutput3Group(RIGHT_DRIVE_MOTOR_TOP,
                RIGHT_DRIVE_MOTOR_FRONT, RIGHT_DRIVE_MOTOR_BACK, 1.0, 1.0, 1.0);
        driveAllMotorsGroup = new PIDOutput2Group(leftDriveGroup,
                rightDriveGroup);

        steerAndSpeed = new SteeringAndSpeedCoordinator(leftDriveGroup,
                rightDriveGroup);
        steerAndSpeed.setSteeringGain(0.5);

        driveSpeedControl = new PIDController(-0.0015, -0.00001, 0.0,
                RobotMap.LEFT_MOTOR_ENCODER, steerAndSpeed.SpeedReceiver);

        lineFollowerPIDSource = new LineFollowerPIDSource();

        // visionProcessorPIDSource = new VisionProcessor();

        encoderSteering = new TwoEncoderPIDSource(RIGHT_MOTOR_ENCODER,
                LEFT_MOTOR_ENCODER);

        // driveLineFollowSteering = new PIDController(0.1, 0.0, 0.0,
        // RobotMap.lineFollowerPIDSource, steerAndSpeed.SteeringReceiver);

        // visionProcessorLineFollowSteering = new PIDController(0.1, 0.0, 0.0,
        // visionProcessorPIDSource, steerAndSpeed.SteeringReceiver);

        driveEncoderSteering = new PIDController(-0.1, 0.0, 0.0,
                encoderSteering, steerAndSpeed.SteeringReceiver);

        elevatorGroup = new PIDOutput2Group(RobotMap.LEFT_ELEVATOR_MOTOR,
                RobotMap.RIGHT_ELEVATOR_MOTOR, -1.0, -1.0);

        elevatorControl = new PIDController(0.01, 0.0, 0.0,
                RobotMap.ELEVATOR_ENCODER, elevatorGroup);

        rightGrabberControl = new PIDController(-0.055, 0.0, 0.0,
                RIGHT_HAND_ENCODER, RIGHT_HAND_MOTOR);
        leftGrabberControl = new PIDController(-0.055, 0.0, 0.0,
                LEFT_HAND_ENCODER, LEFT_HAND_MOTOR);

        // Old Coefficients:
        // rightGrabberControl = new PIDController(-0.007, 0.0, 0.0,
        // RIGHT_HAND_ENCODER, RIGHT_HAND_MOTOR);
        // leftGrabberControl = new PIDController(-0.007, 0.0, 0.0,
        // LEFT_HAND_ENCODER, LEFT_HAND_MOTOR);

        rakeControl = new PIDController(0.0, 0.0, 0.0, RAKE_CLAW_ENCODER,
                RAKE_MOTOR);

        grabberCoordinator = new PIDCoordinator(rightGrabberControl,
                leftGrabberControl, RIGHT_HAND_ENCODER, LEFT_HAND_ENCODER,
                90.0, 2.0);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
