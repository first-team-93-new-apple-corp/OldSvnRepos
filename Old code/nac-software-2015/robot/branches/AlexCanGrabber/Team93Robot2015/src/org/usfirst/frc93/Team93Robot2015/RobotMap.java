// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc93.Team93Robot2015;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.vision.USBCamera;

import org.usfirst.frc93.Team93Robot2015.utilities.PIDOutputGroup;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Placeholder variables
    static int autonomousSelectorPinOne = 2;
    static int autonomousSelectorPinTwo = 3;
    static int autonomousSelectorPinThree = 8;
    static int autonomousSelectorPinFour = 9;
    static int autonomousSelectorPinFive = 10;

    // Autonomous Selector Switches
    // Input values will need to be adjusted
    public static final DigitalInput autonomousSelectorOne = new DigitalInput(
            autonomousSelectorPinOne);
    public static final DigitalInput autonomousSelectorTwo = new DigitalInput(
            autonomousSelectorPinTwo);
    public static final DigitalInput autonomousSelectorThree = new DigitalInput(
            autonomousSelectorPinThree);
    public static final DigitalInput autonomousSelectorFour = new DigitalInput(
            autonomousSelectorPinFour);
    // public static DigitalInput autonomousSelectorFive = new
    // DigitalInput(autonomousSelectorPinFive);
    // Limit Switches
    public static final DigitalInput limitSwitchOne = new DigitalInput(0);
    public static final DigitalInput limitSwitchTwo = new DigitalInput(1);
    public static final DigitalInput elevatorLimitSwitchTop = new DigitalInput(
            0);
    public static final DigitalInput elevatorLimitSwitchBottom = new DigitalInput(
            1);
    // Encoders
    public static final Encoder leftMotorEncoder = new Encoder(6, 7);
    public static final Encoder rightMotorEncoder = new Encoder(4, 5);
    public static final Encoder elevatorEncoder = new Encoder(8, 9);
    // Motors
    public static final Talon leftDriveMotorZero = new Talon(0);
    public static final Talon leftDriveMotorOne = new Talon(1);
    public static final Talon rightDriveMotorZero = new Talon(2);
    public static final Talon rightDriveMotorOne = new Talon(3);
    public static final Talon rightElevatorMotor = new Talon(4);
    public static final Talon leftElevatorMotor = new Talon(5);
    public static final Talon rightHandMotor = new Talon(6);
    public static final Talon leftHandMotor = new Talon(7);
    // Analog Input
    public static final AnalogInput PWDSensor = new AnalogInput(0);
    public static final AnalogInput PWDSensorTwo = new AnalogInput(1);
    public static final AnalogInput rightHandPOT = new AnalogInput(2);
    public static final AnalogInput leftHandPOT = new AnalogInput(3);
    // Camera
    public static final USBCamera cam0 = new USBCamera();
    // PIDControllers
    public static PIDController driveControl;
    public static PIDController elevatorControl;
    // PIDOutputGroups
    public static PIDOutputGroup elevatorGroup = new PIDOutputGroup(
            leftElevatorMotor, rightElevatorMotor, -1.0, 1.0);
    public static PIDOutputGroup leftDriveGroup = new PIDOutputGroup(
            leftDriveMotorZero, leftDriveMotorOne);
    public static PIDOutputGroup rightDriveGroup = new PIDOutputGroup(
            rightDriveMotorZero, rightDriveMotorOne);
    // Solenoids
    public static DoubleSolenoid claw = new DoubleSolenoid(0, 1);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        driveControl = new PIDController(0.0, 0.0, 0.0, leftMotorEncoder,
                leftDriveMotorZero);
        elevatorControl = new PIDController(0.0, 0.0, 0.0, elevatorEncoder,
                elevatorGroup);

        leftMotorEncoder
                .setPIDSourceParameter(Encoder.PIDSourceParameter.kDistance);
        rightMotorEncoder
                .setPIDSourceParameter(Encoder.PIDSourceParameter.kDistance);
        elevatorEncoder
                .setPIDSourceParameter(Encoder.PIDSourceParameter.kDistance);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
