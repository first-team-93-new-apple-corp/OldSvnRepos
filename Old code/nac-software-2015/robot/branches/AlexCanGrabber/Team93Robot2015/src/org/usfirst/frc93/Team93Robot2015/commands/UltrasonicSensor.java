// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc93.Team93Robot2015.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc93.Team93Robot2015.RobotMap;
import org.usfirst.frc93.Team93Robot2015.subsystems.Drive;

/**
 *
 */
public class UltrasonicSensor extends Command {

    double inchesaway;
    private boolean finished = false;

    // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    public UltrasonicSensor(double distance) {
        inchesaway = distance;
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {

    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        Drive.setAllMotors(1.0);
        final double sensorOne = RobotMap.PWDSensor.getVoltage();
        final double sensorTwo = RobotMap.PWDSensorTwo.getVoltage();

        if (sensorOne <= inchesaway) {

            Drive.setRightMotors(1.0);
        }
        else {
            Drive.setRightMotors(0.0);
        }

        if (sensorTwo <= inchesaway) {

            Drive.setLeftMotors(1.0);
        }
        else {
            Drive.setLeftMotors(0.0);
        }
        if (sensorOne >= inchesaway && sensorTwo >= inchesaway) {
            finished = true;
        }
        System.out.println(sensorOne);
        System.out.println(sensorTwo);
        System.out.println("Test");
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return (finished);
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        this.end();
    }
}
