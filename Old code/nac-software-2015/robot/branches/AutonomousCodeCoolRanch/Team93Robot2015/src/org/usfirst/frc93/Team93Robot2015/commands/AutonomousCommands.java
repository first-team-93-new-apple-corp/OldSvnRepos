// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc93.Team93Robot2015.commands;

import edu.wpi.first.wpilibj.command.Command;

/**
 * @codereview EvansChen: What does this command do? It looks like an attempt at
 *             reinventing the wheel by making another DriveForward command. I
 *             suggest deletion, unless there is another purpose.
 * @codereview ColbyMcKinley: If it is decided to keep this command, you should
 *             write a short description of it in this area, within the
 *             comments.
 */

public class AutonomousCommands extends Command {

    public AutonomousCommands() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // int x = RobotMap.leftMotorEncoder.get();
    // int y = RobotMap.rightMotorEncoder.get();

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        // RobotMap.leftMotorEncoder.reset();
        // RobotMap.rightMotorEncoder.reset();

    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        // double leftTalonOne = RobotMap.leftMotorOne.get();//No leftMotorZero
        // in RobotMap
        // double leftTalonTwo = RobotMap.leftMotorTwo.get();
        // double rightTalonOne = RobotMap.rightMotorOne.get();//No
        // rightMotorZero in RobotMap
        // double rightTalonTwo = RobotMap.rightMotorTwo.get();
        //
        // if (x >= 256) {
        // leftTalonOne = 0;
        // leftTalonTwo = 0;
        // }
        // if (y >= 256) {
        // rightTalonOne = 0;
        // rightTalonTwo = 0;
        // }
        // RobotMap.rightMotorOne.set(rightTalonOne);
        // RobotMap.rightMotorTwo.set(rightTalonTwo);//No rightMotorZero in
        // RobotMap
        // RobotMap.leftMotorOne.set(leftTalonOne);
        // RobotMap.leftMotorTwo.set(rightTalonTwo);//No leftMotorZero in
        // RobotMap
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
