// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc93.Team93Robot2015.subsystems;

import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.command.Subsystem;

import org.usfirst.frc93.Team93Robot2015.RobotMap;
import org.usfirst.frc93.Team93Robot2015.commands.DriveContinuous;
import org.usfirst.frc93.Team93Robot2015.utilities.PIDOutput2Group;
import org.usfirst.frc93.Team93Robot2015.utilities.PIDOutput3Group;

/**
 * @author New Apple Corps Robotics Team 93
 * 
 * @codereview ColbyMcKinley: In this area you should write a brief description
 *             of the subsystem, within the comments.
 */

public class Drive extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static PIDOutput3Group leftDriveGroup;
    public static PIDOutput3Group rightDriveGroup;
    public static PIDOutput2Group driveGroup;

    public static PIDController driveControl;

    public Drive() {

        leftDriveGroup = new PIDOutput3Group(RobotMap.LEFT_DRIVE_MOTOR_ZERO,
                RobotMap.LEFT_DRIVE_MOTOR_ONE, RobotMap.LEFT_DRIVE_MOTOR_TWO);

        rightDriveGroup = new PIDOutput3Group(RobotMap.RIGHT_DRIVE_MOTOR_ZERO,
                RobotMap.RIGHT_DRIVE_MOTOR_ONE, RobotMap.RIGHT_DRIVE_MOTOR_TWO);

        driveGroup = new PIDOutput2Group(leftDriveGroup, rightDriveGroup);

        driveControl = new PIDController(0.0, 0.0, 0.0,
                RobotMap.LEFT_MOTOR_ENCODER, Drive.driveGroup);
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
        setDefaultCommand(new DriveContinuous(1.0));

    }

    /**
     * Sets the left motor group.
     * 
     * @param value
     *            The value to set the left motor group to.
     */
    public static void setLeftMotors(double value) {
        leftDriveGroup.set(value);
    }

    /**
     * Sets the right motor group.
     * 
     * @param value
     *            The value to set the right motor group to.
     */
    public static void setRightMotors(double value) {
        rightDriveGroup.set(value);
    }

    /**
     * Sets all of the motors to the given value. Uses the gains of each motor
     * group. To ignore gains, use setAllMotorsIgnoreGains.
     * 
     * @param value
     *            The value to set the motors to.
     */
    public static void setAllMotors(double value) {
        setLeftMotors(value);
        setRightMotors(value);
    }

    /**
     * Sets all of the motors to the given value, ignoring gains.
     * 
     * @param value
     *            The value to set the motors to, ignoring gains.
     */
    public static void setAllMotorsIgnoreGains(double value) {
        double oldLeftGain = driveGroup.getGainA();
        double oldRightGain = driveGroup.getGainB();

        driveGroup.setGains(1.0, 1.0);

        driveGroup.set(value);

        driveGroup.setGains(oldLeftGain, oldRightGain);
    }

    /**
     * Resets the Drive Encoders.
     */
    public static void resetSensors() {
        RobotMap.RIGHT_MOTOR_ENCODER.reset();
        RobotMap.LEFT_MOTOR_ENCODER.reset();
    }
}
