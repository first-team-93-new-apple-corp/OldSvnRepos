// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc93.Team93Robot2015;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.BuiltInAccelerometer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Talon;

import org.usfirst.frc93.Team93Robot2015.utilities.Team93Potentiometer;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Placeholder variables
    static final int AUTONOMOUS_SELECTOR_PIN_ONE = 2;
    static final int AUTONOMOUS_SELECTOR_PIN_TWO = 3;
    static final int AUTONOMOUS_SELECTOR_PIN_THREE = 8;
    static final int AUTONOMOUS_SELECTOR_PIN_FOUR = 9;
    static final int AUTONOMOUS_SELECTOR_PIN_FIVE = 10;

    // Autonomous Selector Switches
    // Input values will need to be adjusted
    public static final DigitalInput AUTONOMOUS_SELECTOR_ONE = new DigitalInput(
            AUTONOMOUS_SELECTOR_PIN_ONE);
    public static final DigitalInput AUTONOMOUS_SELECTOR_TWO = new DigitalInput(
            AUTONOMOUS_SELECTOR_PIN_TWO);
    public static final DigitalInput AUTONOMOUS_SELECTOR_THREE = new DigitalInput(
            AUTONOMOUS_SELECTOR_PIN_THREE);
    public static final DigitalInput AUTONOMOUS_SELECTOR_FOUR = new DigitalInput(
            AUTONOMOUS_SELECTOR_PIN_FOUR);
    // public static DigitalInput autonomousSelectorFive = new
    // DigitalInput(autonomousSelectorPinFive);

    // Limit Switches
    public static final DigitalInput ELEVATOR_LIMIT_SWITCH_TOP = new DigitalInput(
            0);
    public static final DigitalInput ELEVATOR_LIMIT_SWITCH_BOTTOM = new DigitalInput(
            1);
    public static final DigitalInput BIN_SENSOR_LIMIT_SWITCH = new DigitalInput(
            2);

    // Infrared Sensor
    public static final DigitalInput BIN_SENSOR_INFRADRED_SENSOR = new DigitalInput(
            3);

    // Reed Switch
    public static final DigitalInput ELEVATOR_REED_SWITCH = new DigitalInput(4);

    // Encoders
    public static final Encoder LEFT_MOTOR_ENCODER = new Encoder(5, 6);
    public static final Encoder RIGHT_MOTOR_ENCODER = new Encoder(7, 8);
    public static final Encoder ELEVATOR_ENCODER = new Encoder(9, 10);

    // Motors
    public static final Talon LEFT_DRIVE_MOTOR_ZERO = new Talon(0);
    public static final Talon LEFT_DRIVE_MOTOR_ONE = new Talon(1);
    public static final Talon LEFT_DRIVE_MOTOR_TWO = new Talon(2);

    public static final Talon RIGHT_DRIVE_MOTOR_ZERO = new Talon(3);
    public static final Talon RIGHT_DRIVE_MOTOR_ONE = new Talon(4);
    public static final Talon RIGHT_DRIVE_MOTOR_TWO = new Talon(5);
    public static BuiltInAccelerometer GrantIsDoingBuggerAll = new BuiltInAccelerometer();
    public static final Talon RIGHT_ELEVATOR_MOTOR = new Talon(7);
    public static final Talon LEFT_ELEVATOR_MOTOR = new Talon(6);
    public static final Talon RIGHT_HAND_MOTOR = new Talon(7);
    public static final Talon LEFT_HAND_MOTOR = new Talon(8);
    public static final Talon RAKE_MOTOR = new Talon(9);

    // Analog Inputs
    public static final Team93Potentiometer RIGHT_HAND_POT = new Team93Potentiometer(
            2, 1.0, 0.0);
    public static final Team93Potentiometer LEFT_HAND_POT = new Team93Potentiometer(
            3, 1.0, 0.0);
    public static final AnalogInput RAKE_CLAW_ENCODER = new AnalogInput(4);

    public static final AnalogInput LINE_FOLLOWER_LEFT = new AnalogInput(5);
    public static final AnalogInput LINE_FOLLOWER_MIDDLE = new AnalogInput(6);
    public static final AnalogInput LINE_FOLLOWER_RIGHT = new AnalogInput(7);
    public static AnalogInput lineFollowerOne = new AnalogInput(0);
    public static AnalogInput lineFollowerTwo = new AnalogInput(1);
    public static AnalogInput lineFollowerThree = new AnalogInput(2);

    // Solenoids
    public static final DoubleSolenoid CLAW_SOLENOID = new DoubleSolenoid(0, 1);
    public static final DoubleSolenoid DRAWBRIDGE_SOLENOID = new DoubleSolenoid(
            0, 1);

    // Accelerometer
    public static final BuiltInAccelerometer ROBOT_ACCELEROMETER = new BuiltInAccelerometer();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        LEFT_MOTOR_ENCODER
                .setPIDSourceParameter(Encoder.PIDSourceParameter.kDistance);
        RIGHT_MOTOR_ENCODER
                .setPIDSourceParameter(Encoder.PIDSourceParameter.kDistance);
        ELEVATOR_ENCODER
                .setPIDSourceParameter(Encoder.PIDSourceParameter.kDistance);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
